import pytest
from your_app import app  # Import Flask application
from flask import url_for, session

# Login Test
def test_login():
    with app.test_client() as client:
        # Send a POST request to simulate login
        response = client.post(
            '/login',
            data={'username': 'test_user', 'password': 'test_password'},
            follow_redirects=True
        )

        # Check if the login was successful (assuming it redirects to the homepage after login)
        assert response.status_code == 200
        assert b'Welcome, test_user' in response.data  # Modify based on actual welcome message

# Signup Test
def test_signup():
    with app.test_client() as client:
        # Send a POST request to simulate registration
        response = client.post(
            '/signup',
            data={'username': 'new_user', 'password': 'new_password'},
            follow_redirects=True
        )

        # Check if the registration was successful (assuming it redirects to the login page after signup)
        assert response.status_code == 200
        assert b'Login' in response.data  # Modify based on actual login page content

        # Perform a login test with the registered user
        response = client.post(
            '/login',
            data={'username': 'new_user', 'password': 'new_password'},
            follow_redirects=True
        )

        # Check if the login was successful (assuming it redirects to the homepage after login)
        assert response.status_code == 200
        assert b'Welcome, new_user' in response.data  # Modify based on actual welcome message

# Logout Test
def test_logout():
    with app.test_client() as client:
        # Log in the user (assuming it redirects to the homepage after login)
        client.post(
            '/login',
            data={'username': 'test_user', 'password': 'test_password'},
            follow_redirects=True
        )

        # Logout the user
        response = client.get('/logout', follow_redirects=True)

        # Check if the logout was successful (assuming it redirects to the login page after logout)
        assert response.status_code == 200
        assert b'Login' in response.data  # Modify based on actual login page content
